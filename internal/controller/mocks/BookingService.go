// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	domain "meeting-room-booking/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// BookingService is an autogenerated mock type for the BookingService type
type BookingService struct {
	mock.Mock
}

type BookingService_Expecter struct {
	mock *mock.Mock
}

func (_m *BookingService) EXPECT() *BookingService_Expecter {
	return &BookingService_Expecter{mock: &_m.Mock}
}

// CreateBooking provides a mock function with given fields: booking
func (_m *BookingService) CreateBooking(booking domain.Booking) error {
	ret := _m.Called(booking)

	if len(ret) == 0 {
		panic("no return value specified for CreateBooking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Booking) error); ok {
		r0 = rf(booking)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookingService_CreateBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBooking'
type BookingService_CreateBooking_Call struct {
	*mock.Call
}

// CreateBooking is a helper method to define mock.On call
//   - booking domain.Booking
func (_e *BookingService_Expecter) CreateBooking(booking interface{}) *BookingService_CreateBooking_Call {
	return &BookingService_CreateBooking_Call{Call: _e.mock.On("CreateBooking", booking)}
}

func (_c *BookingService_CreateBooking_Call) Run(run func(booking domain.Booking)) *BookingService_CreateBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Booking))
	})
	return _c
}

func (_c *BookingService_CreateBooking_Call) Return(_a0 error) *BookingService_CreateBooking_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BookingService_CreateBooking_Call) RunAndReturn(run func(domain.Booking) error) *BookingService_CreateBooking_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBooking provides a mock function with given fields: id
func (_m *BookingService) DeleteBooking(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBooking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookingService_DeleteBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBooking'
type BookingService_DeleteBooking_Call struct {
	*mock.Call
}

// DeleteBooking is a helper method to define mock.On call
//   - id int
func (_e *BookingService_Expecter) DeleteBooking(id interface{}) *BookingService_DeleteBooking_Call {
	return &BookingService_DeleteBooking_Call{Call: _e.mock.On("DeleteBooking", id)}
}

func (_c *BookingService_DeleteBooking_Call) Run(run func(id int)) *BookingService_DeleteBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *BookingService_DeleteBooking_Call) Return(_a0 error) *BookingService_DeleteBooking_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BookingService_DeleteBooking_Call) RunAndReturn(run func(int) error) *BookingService_DeleteBooking_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *BookingService) GetAll() ([]domain.Booking, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Booking, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Booking); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookingService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type BookingService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *BookingService_Expecter) GetAll() *BookingService_GetAll_Call {
	return &BookingService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *BookingService_GetAll_Call) Run(run func()) *BookingService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BookingService_GetAll_Call) Return(_a0 []domain.Booking, _a1 error) *BookingService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookingService_GetAll_Call) RunAndReturn(run func() ([]domain.Booking, error)) *BookingService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookingByID provides a mock function with given fields: id
func (_m *BookingService) GetBookingByID(id int) (*domain.Booking, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBookingByID")
	}

	var r0 *domain.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Booking, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Booking); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookingService_GetBookingByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookingByID'
type BookingService_GetBookingByID_Call struct {
	*mock.Call
}

// GetBookingByID is a helper method to define mock.On call
//   - id int
func (_e *BookingService_Expecter) GetBookingByID(id interface{}) *BookingService_GetBookingByID_Call {
	return &BookingService_GetBookingByID_Call{Call: _e.mock.On("GetBookingByID", id)}
}

func (_c *BookingService_GetBookingByID_Call) Run(run func(id int)) *BookingService_GetBookingByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *BookingService_GetBookingByID_Call) Return(_a0 *domain.Booking, _a1 error) *BookingService_GetBookingByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookingService_GetBookingByID_Call) RunAndReturn(run func(int) (*domain.Booking, error)) *BookingService_GetBookingByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBooking provides a mock function with given fields: booking
func (_m *BookingService) UpdateBooking(booking domain.Booking) error {
	ret := _m.Called(booking)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBooking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Booking) error); ok {
		r0 = rf(booking)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookingService_UpdateBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBooking'
type BookingService_UpdateBooking_Call struct {
	*mock.Call
}

// UpdateBooking is a helper method to define mock.On call
//   - booking domain.Booking
func (_e *BookingService_Expecter) UpdateBooking(booking interface{}) *BookingService_UpdateBooking_Call {
	return &BookingService_UpdateBooking_Call{Call: _e.mock.On("UpdateBooking", booking)}
}

func (_c *BookingService_UpdateBooking_Call) Run(run func(booking domain.Booking)) *BookingService_UpdateBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Booking))
	})
	return _c
}

func (_c *BookingService_UpdateBooking_Call) Return(_a0 error) *BookingService_UpdateBooking_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BookingService_UpdateBooking_Call) RunAndReturn(run func(domain.Booking) error) *BookingService_UpdateBooking_Call {
	_c.Call.Return(run)
	return _c
}

// NewBookingService creates a new instance of BookingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingService {
	mock := &BookingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
